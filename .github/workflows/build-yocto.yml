name: Build Yocto

on:
  workflow_call:
    outputs:
      artifacts_url:
        description: "URL to retrieve build artifacts"
        value: ${{ jobs.create-output.outputs.url }}

env:
  #CACHE_DIR: /srv/gh-runners/quic-yocto
  #KAS_REPO_REF_DIR: /srv/gh-runners/quic-yocto/kas-mirrors
  CACHE_DIR: /efs/qli/metaqcom/gh-runners/quic-yocto
  KAS_REPO_REF_DIR: /efs/qli/metaqcom/gh-runners/quic-yocto/kas-mirrors

jobs:
  kas-setup:
    if: github.repository == 'qualcomm-linux/awstest-meta-qcom'
    runs-on: [self-hosted, x86, amd64-dev]
    steps:
      - name: Update kas mirrors
        run: |
          for r in $(find ${KAS_REPO_REF_DIR}/* -maxdepth 0 -type d); do
            echo "pre-fetch: $r"
            git -C $r fetch --prune origin '+refs/*:refs/*'
          done

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run kas lock
        run: |
          kas dump --update --lock --inplace ci/base.yml

      - uses: actions/upload-artifact@v4
        with:
          name: kas-lock
          path: ci/*.lock.yml

  yocto-check-layer:
    needs: kas-setup
    if: github.repository == 'qualcomm-linux/awstest-meta-qcom'
    runs-on: [self-hosted, x86, amd64-dev]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: kas-lock
          path: ci/

      - name: Run yocto-check-layer
        run: |
          ci/yocto-check-layer.sh

  yocto-patchreview:
    needs: kas-setup
    if: github.repository == 'qualcomm-linux/awstest-meta-qcom'
    runs-on: [self-hosted, x86, amd64-dev]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: kas-lock
          path: ci/

      - name: Run Yocto patchreview
        run: |
          ci/yocto-patchreview.sh

  compile:
    needs: kas-setup
    if: github.repository == 'qualcomm-linux/awstest-meta-qcom'
    outputs:
      url: ${{ steps.upload_artifacts.outputs.url }}
    strategy:
      fail-fast: true
      matrix:
        machine:
          - qcm6490-idp
          - qcs6490-rb3gen2-core-kit
          - qcs8300-ride-sx
          - qcs9075-iq-9075-evk
          - qcs9100-ride-sx
          - qrb2210-rb1-core-kit
          - qcom-armv8a
          - qcom-armv7a
    runs-on: [self-hosted, x86, amd64-dev]
    name: ${{ matrix.machine }}/poky/systemd
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: kas-lock
          path: ci/

      - name: Kas build
        run: |
          export DL_DIR=${CACHE_DIR}/downloads
          export SSTATE_DIR=${CACHE_DIR}/sstate-cache
          export KAS_WORK_DIR=$PWD/../kas
          mkdir $KAS_WORK_DIR
          kas build ci/mirror.yml:ci/${{ matrix.machine }}.yml
          ci/yocto-pybootchartgui.sh && mv $KAS_WORK_DIR/build/buildchart.svg .

          if [ "${{ matrix.machine }}" = "qcom-armv8a" ]; then
            kas build ci/mirror.yml:ci/${{ matrix.machine }}.yml:ci/initramfs-test.yml
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: buildchart-${{ matrix.machine }}
          path: buildchart.svg

      - name: Stage build artifacts for publishing
        run: |
          # The upload-private-artifact-action runs from a container that
          # expects file to be relative to our PWD. deploy_dir is outside
          # that, so we move things around:
          deploy_dir=../kas/build/tmp/deploy/images/${{matrix.machine}}
          uploads_dir=./uploads
          mkdir $uploads_dir
          find $deploy_dir/ -maxdepth 1 -name "*.rootfs*.qcomflash" -exec rm -rf {} \;
          mv $deploy_dir $uploads_dir/

      - name: Upload private artifacts
        uses: qualcomm-linux/upload-private-artifact-action@v1
        id: upload_artifacts
        with:
          path: ./uploads

  create-output:
    needs: compile
    outputs:
      url: ${{ steps.print-output.outputs.url }}
    runs-on: [self-hosted, x86, amd64-dev]
    steps:
      - name: "Print output"
        id: print-output
        env:
          build_url: ${{ needs.compile.outputs.url }}
        run: |
          echo "Downloads URL: ${build_url}"
          echo "url=\"${build_url}\"" >> $GITHUB_OUTPUT
          echo "${build_url}" > build_url
          echo "## Download URL" >> $GITHUB_STEP_SUMMARY
          echo "[${build_url}](${build_url})" >> $GITHUB_STEP_SUMMARY
      - name: Upload build URL
        uses: actions/upload-artifact@v4
        with:
          name: build_url
          path: build_url
